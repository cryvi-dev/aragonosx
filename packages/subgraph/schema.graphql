# Types

# Token

interface Token {
  id: ID! # use address as id
  name: String
  symbol: String
}

# ACL

type ContractPermissionId @entity(immutable: true) {
  id: ID! # where + permissionId
  dao: Dao!
  where: Bytes!
  permissionId: Bytes!
}

# Cannot be immutable because a permission can be revoked and granted in the same TX.
# This results in an error in the subgraph if the entity is immutable.
type Permission @entity {
  "no need to store granted as we can delete permission when revoked"
  id: ID! # where + permissionId + who
  dao: Dao!
  where: Bytes!
  contractPermissionId: ContractPermissionId!
  who: Bytes!
  actor: Bytes!
  condition: Bytes
}

# Executions

type Action @entity {
  id: ID!
  to: Bytes!
  value: BigInt!
  data: Bytes!
  dao: Dao!
  proposal: IProposal!
  execResult: Bytes
}

# Dao

type Dao @entity {
  id: ID! # use address as id
  subdomain: String
  creator: Bytes!
  daoURI: String
  metadata: String
  createdAt: BigInt!
  token: ERC20Contract
  actions: [Action!]! @derivedFrom(field: "dao")
  transfers: [TokenTransfer!]! @derivedFrom(field: "dao")
  balances: [TokenBalance!]! @derivedFrom(field: "dao")
  contractPermissionIds: [ContractPermissionId!]! @derivedFrom(field: "dao")
  permissions: [Permission!]! @derivedFrom(field: "dao")
  proposals: [IProposal!]! @derivedFrom(field: "dao")
  trustedForwarder: Bytes
  signatureValidator: Bytes
  standardCallbacks: [StandardCallback!]! @derivedFrom(field: "dao")

  plugins: [PluginInstallation!]! @derivedFrom(field: "dao")
}

# Plugins

type PluginRepo @entity(immutable: true) {
  id: ID! # address
  subdomain: String!
  releases: [PluginRelease!]! @derivedFrom(field: "pluginRepo")
  # Holds all preparations. Also applied ones.
  preparations: [PluginPreparation!]! @derivedFrom(field: "pluginRepo")
  # Holds all installed and uninstalled installations.
  installations: [PluginInstallation!] @derivedFrom(field: "appliedPluginRepo")
}

type PluginSetup @entity(immutable: true) {
  id: ID! # contract address
  versions: [PluginVersion!]! @derivedFrom(field: "pluginSetup")
}

type PluginRelease @entity {
  id: ID! # pluginRepo + release
  pluginRepo: PluginRepo!
  release: Int!
  metadata: String! # release metadata
  builds: [PluginVersion!]! @derivedFrom(field: "release")
}

type PluginVersion @entity(immutable: true) {
  id: ID! # pluginRepo + release + build
  pluginRepo: PluginRepo!
  pluginSetup: PluginSetup

  release: PluginRelease!
  build: Int!

  metadata: String! # build metadata
  # Holds all preparations. Also applied ones.
  preparations: [PluginPreparation!]! @derivedFrom(field: "pluginVersion")
  # Holds all installed and uninstalled installations.
  installations: [PluginInstallation!] @derivedFrom(field: "appliedVersion")
}

type PluginPermission @entity(immutable: true) {
  id: ID! # PluginPreparation + operation + where + who + permissionId
  pluginPreparation: PluginPreparation!
  operation: PermissionOperation!
  where: Bytes!
  who: Bytes!
  condition: Bytes
  permissionId: Bytes!
}

enum PermissionOperation {
  Grant
  Revoke
  GrantWithCondition
}

type PluginPreparation @entity(immutable: true) {
  id: ID! # psp setupId + installationId
  installation: PluginInstallation!
  creator: Bytes!
  dao: Dao!
  preparedSetupId: Bytes! # the psp setupId
  pluginRepo: PluginRepo!
  pluginVersion: PluginVersion!
  data: Bytes
  pluginAddress: Bytes!
  helpers: [Bytes!]!
  permissions: [PluginPermission!]! @derivedFrom(field: "pluginPreparation")
  type: PluginPreparationType!
}

# Don't implement IPlugin. Otherwise it would show up under plugins in the DAO entity
type PluginInstallation @entity {
  id: ID! # psp installationId
  dao: Dao!
  plugin: IPlugin # The plugin address as id provided by the applied preparation
  appliedPreparation: PluginPreparation
  appliedSetupId: Bytes # The setupId of the application see PSP documentation for more info
  appliedVersion: PluginVersion # Stored to track installations in the different plugin versions
  appliedPluginRepo: PluginRepo # Stored to track installation in the different plugin repos
  preparations: [PluginPreparation!]! @derivedFrom(field: "installation")
  state: PluginPreparationState!
}

enum PluginPreparationType {
  Installation
  Update
}

enum PluginPreparationState {
  InstallationPrepared
  Installed
  UpdatePrepared
  UninstallPrepared
  Uninstalled
}

interface IPlugin {
  id: ID! # plugin address
  dao: Dao!
  pluginAddress: Bytes!

  installations: [PluginInstallation!]! @derivedFrom(field: "plugin")

  # TODO: Uncomment as soon as the plugins have their own subgraph
  # appliedPreparation: PluginPreparation
  # appliedSetupId: Bytes # The setupId of the application see PSP documentation for more info
  # preparations: [PluginPreparation!]! @derivedFrom(field: "plugin")
  # state: PluginPreparationState!
}

### Entities below should move to there respective subgraph once plugin is seperated from the Aragon OSx
# Proposal

interface IProposal {
  id: ID! # package + proposalId
  dao: Dao!
  creator: Bytes!
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  executionTxHash: Bytes
}

# Plugin

type MultisigPlugin implements IPlugin @entity {
  "TODO: attributes should be appended to Plugin once plugin is seperated from Aragon OSx"
  id: ID!
  dao: Dao!
  pluginAddress: Bytes!

  installations: [PluginInstallation!]! @derivedFrom(field: "plugin")

  proposalCount: BigInt
  proposals: [MultisigProposal!]! @derivedFrom(field: "plugin")
  members: [MultisigApprover!]! @derivedFrom(field: "plugin")

  # multisig settings
  minApprovals: Int
  onlyListed: Boolean
}

type MultisigApprover @entity {
  id: ID! # plugin_address + member_address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [MultisigProposalApprover!]! @derivedFrom(field: "approver")
  plugin: MultisigPlugin!
}

type MultisigProposalApprover @entity(immutable: true) {
  "ApproverProposal for Many-to-Many"
  id: ID! # approver + proposal
  approver: MultisigApprover!
  proposal: MultisigProposal!
  createdAt: BigInt!
}

type MultisigProposal implements IProposal @entity {
  id: ID! # plugin + proposalId
  dao: Dao!
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  plugin: MultisigPlugin!
  pluginProposalId: BigInt!
  creator: Bytes!
  metadata: String
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  creationBlockNumber: BigInt!
  snapshotBlock: BigInt!
  minApprovals: Int!
  approvals: Int
  potentiallyExecutable: Boolean!
  executed: Boolean!
  executionDate: BigInt
  executionBlockNumber: BigInt
  executionTxHash: Bytes
  approvers: [MultisigProposalApprover!]! @derivedFrom(field: "proposal")
}
